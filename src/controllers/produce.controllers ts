import { Request, Response } from "express";
import * as cache from "memory-cache";
import { AppDataSource } from "../data-source";
import { Produce } from "../entity/Produce.entity";

export class ProduceController {
  static async getAllProduce(req: Request, res: Response) {
    const data = cache.get("data");
    if (data) {
      console.log("serving from cache");
      return res.status(200).json({
        data,
      });
    } else {
      console.log("serving from db");
      const produceRepository = AppDataSource.getRepository(Produce);
      const produce = await produceRepository.find();
      cache.put("data", produce, 10000);
      return res.status(200).json({
        data: produce,
      });
    }
  }
  static async createProduce(req: Request, res: Response) {
    try {
      const { produceName } =
      req.body;
      const produce = new Produce();
      produce.ProduceName = produceName;
      const produceRepository = AppDataSource.getRepository(Produce);
      await produceRepository.save(produce);
      return res
      .status(200)
      .json({ message: "Produce created successfully", produce });
    } catch (error) {
      console.error("Error creating produce:", error);
      return res.status(500).json({ message: "Failed to create produce", error })
    }
  }

  static async updateProduce(req: Request, res: Response) {
    try {
      const { id } = req.params;
      const { produceName } =
      req.body;
      const produceRepository = AppDataSource.getRepository(Produce);
      const produce = await produceRepository.findOne({
        where: { id: id },
      });
      if (!produce) {
        return res.status(404).json({ message: "Produce not found" });
      }
      produce.ProduceName = produceName;
      await produceRepository.save(produce);
      return res
      .status(200)
      .json({ message: "Produce updated successfully", produce });
    } catch (error) {
      console.error("Error updating produce:", error);
      return res.status(500).json({ message: "Failed to update produce", error })
    }
  }

  static async deleteProduce(req: Request, res: Response) {
    try {
      const { id } = req.params;
      const produceRepository = AppDataSource.getRepository(Produce);
      const produce = await produceRepository.findOne({
        where: { id: id },
      });
      if (!produce) {
        return res.status(404).json({ message: "Produce not found" });
      }      
      await produceRepository.remove(produce);
      return res
      .status(200)
      .json({ message: "Produce deleted successfully", produce });
    } catch (error) {
      console.error("Error deleting produce:", error);
      return res.status(500).json({ message: "Failed to delete produce", error })
    }
  }
}
